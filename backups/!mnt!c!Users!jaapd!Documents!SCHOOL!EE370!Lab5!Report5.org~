#+TITLE:EE370 Lab4
#+SUBTITLE: Instructor: Paula Quintana
#+AUTHOR: Jaap de Dood
#+DATE: October 2 2017
#+OPTIONS: toc:nil
#+LaTeX_HEADER: \usepackage[margin=1.0in]{geometry}
* Activity 1
In this activity we connected and tested using an opto-reflective switch. This switch consists of an IR LED and a phototransistor. The LED emits infrared light which the base of phototransistor is sensitive to. Hence when IR light is reflected off a surface from the LED the trasistor will become conductive.\newline\newline
The following circuit was built:
#+ATTR_LATEX: :width 200px
file:image0.jpg
and the DataMonitoring.bs2 program from the previous lab was again uploaded to the board. By running the StampPlot macro sic-pc-opto-plot.spm and moving a white card along a ruler in front of the opto-reflective sensor the following graph was produced:
#+ATTR_LATEX: :width 400px
file:image1.jpg
There was no change in voltage until the card was about 20mm from the sensor. After this point, the transistor began conducting and hence V_{CE} was reduced. The normal LED in the circuit lit up when V_{CE} dropped to around 1.4V.\newline\newline
This process was then repeated keeping everything the same except changing R_C to a 100k\Omega resistor and a 1M\Omega resistor.\newline\newline
100k\Omega:
#+ATTR_LATEX: :width 400px
file:image2.jpg
As R_C was increased the voltage at which the transistor began conducting was a lower value. Using a lower value resistor like 10k\Omega is probably a better choice for a digital switch as the transition from HIGH to LOW was more abrupt. \newline\newline
1M\Omega:
#+ATTR_LATEX: :width 400px
file:image3.jpg
** Challenge 4-1
| Surface             | Distance(mm) |
| White paper card    |           28 |
| Finger              |           19 |
| Red credit card     |           26 |
| Silver phone        |           25 |
| Black business card |           14 |
Whiter, shinier surfaces reflect the IR light better so a lower distance was required to turn on the LED.
** Questions
*** In the circuit shown in figure 4-2, is the opto-reflectiveoutput (PIN 8) “active low”or “active high”?(for maximum reflection(active), what’s the level seen by P8(High or Low)?
PIN 8 in this circuit is active low as the pin is usually connected to V_{dd} which is HIGH. When the transistor Q_1 receives a base current,which happens at maximum reflection, and begins conducting, it acts like a short circuit to ground that brings P8 down to LOW. 
*** Why is "edge triggering" used in control systems?
If a control system was not edge triggered, this could cause issues in applications such as the conveyor belt example. For example, if a system intended to count boxes on a conveyor belt was level triggered, it would count a box every time there is an object in front of the proximity sensor. However, this check for boxes may occur multiple times a second and so, even if a box only took a second to pass the sensor, the system would count multiple boxes every time a single box passes the sensor. Instead, we use edge triggering. When a sensor goes from detecting no box (LOW) to detecting a box (HIGH), there is a rising "edge" in the input of the system. If the system only counts these rising edges, it will accurately count the amount of boxes passing the sensor. 
*** What is a "debounce filter" and why are these filters applied to controller inputs?
A "bounce" in a system can occur, for example, when a pushbutton is pressed and the contacts of the switch vibrate or when a box rattles in front of a conveyor belt sensor. Using the conveyor belt example again, if a box shakes in front of the sensor, the system may detect multiple edges quickly after each other. This will cause multiple boxes to be counted instead of just one. To eliminate this error, a debounce filter is implemented either in software or in hardware. In the case of software, this could be a simple delay after each reading so that the next few inputs from the bounce are not read.
*** If a control system has a start and stop button to initiate and stop a process respectively, how should your system react if both buttons are being pressed at the same time?
If both start and stop are pressed, then system should only read the stop command for safety. It is more likely there will be an emergency where the stop button has to be pressed to stop the device from running than to suddenly start it. 
* Activity 6
In this activity, the same circuit as in Activity 1 was used, except the opto-reflective sensor was aimed at the center of a DC fan. The following code was uploaded to the board:
#+BEGIN_EXAMPLE
' -----[ Title ]-----------------------------------------------------------
' Process Control - Tachometer.bs2
' Measures RPM of Fan
' {$STAMP BS2}
' {$PBASIC 2.5}
' -----[ Declarations ]----------------------------------------------------
Opto_SW PIN 8 ' Opto-Reflector
Sampled PIN 9 ' Indicator to indicate sampling
Opto_Count VAR Word ' Count from opto-reflective switch
RPM VAR Word ' Calculated RPM
SP_Data VAR Word ' Data returned from StampPlot
CyclesPerRev CON 1
' -----[ Initialization ]--------------------------------------------------
PAUSE 500 ' Connection stabilizing time
DEBUG CR,"!RSET",CR, ' Reset StampPlot
 "!CLRC",CR, ' Clear any text on plot
 "!SPAN 0,10000",CR ' Set Y-Axis span 
 ' Label text boxes
DEBUG "!O lblData = Sample Time\n (mSec)", CR,
 "!O txtData = 1000", CR,
 "!O txtR = ", CR,
 "!O txtY = ", CR,
 "!O txtG = Sampled", CR,
 "!O Stat1 = Counts:", CR,
 "!O Stat2 = RPM:", CR,
 "!O txtFileName = Tach1", CR
DEBUG "!O Meter = 0,0,10000,0,10000", CR ' Set SP meter
DEBUG "!RSET", CR ' Reset after configuring
LOW Sampled
' -----[ Main Routine ]----------------------------------------------------
DO
 GOSUB ReadSP
 GOSUB ReadTach
 GOSUB DisplayData
LOOP
ReadSP:
 DEBUG "!READ (txtData)",CR ' Request data from StampPlot
 DEBUGIN DEC SP_Data ' Accept returning data
RETURN
ReadTach:
 COUNT Opto_SW,SP_Data,Opto_Count ' Measure counts per unit time
 TOGGLE Sampled ' Toggle LED to show sample done
 RPM = Opto_Count * (60000 / SP_Data) / CyclesPerRev ' Calculate RPM
RETURN
DisplayData:
 DEBUG DEC RPM,CR ' Analog data of RPM
 DEBUG IBIN Sampled, CR ' Digital trace of samples
 DEBUG "!O Stat1 = Counts: ", DEC Opto_Count, CR ' Update controls
 DEBUG "!O Stat2 = RPM: ", DEC RPM, CR
 DEBUG "!O METER =", DEC RPM, CR ' Update SP Meter
 DEBUG "!O ImgG = ", BIN Sampled, CR
RETURN 
#+END_EXAMPLE
And a half-black half-white piece of paper was stuck to the fan and the fan's RPM was measured using different sample times and the RPM was altered by slowing down the fan with a finger. This produced the following graph:
#+ATTR_LATEX: :width 200px
file:image4.jpg
The program "counts" a rotation every time the value read by the sensor transitions from a HIGH to LOW as the black and then white sides of the paper pass the sensor. The RPM is then calculated in the code by 
#+BEGIN_EXAMPLE
RPM = Opto_Count * (60000 / SP_Data) / CyclesPerRev
#+END_EXAMPLE
** Questions
*** How does the PBASIC "COUNT" function work? Describe each function parameter.
The COUNT function uses the syntax: COUNT pin, Duration Variable and counts the number of pulses that occur on the pin entered on the "pin" parameter for the "Duration" length of time and stores the number in the variable put in for "Variable."
*** How would you increase the resolution of the RPM measurement?
One way to increase the resolution of the RPM measurement is by using a larger sample time, as with any statistical measurement, using a larger sample size increases the accuracy of the result. Another method is to increase the number of counts per resolution. The amount you can increase this by is limited by the response time of the transistor as at a certain amount of counts per second there is not enough distinction between the HIGH and LOW read by the sensor.
